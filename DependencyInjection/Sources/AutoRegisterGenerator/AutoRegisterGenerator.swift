//
//  AutoRegisterGenerator.swift
//  
//
//  Created by BartÅ‚omiej Bukowiecki on 09/06/2024.
//

import Foundation

@main
@available(iOS 15, macOS 12, *)
struct AutoRegisterGenerator {
    static func main() async throws {
        guard CommandLine.arguments.count > 2 else {
            throw DummyError(files: CommandLine.arguments.count - 1)
        }
        
        let outPutFilePath = CommandLine.arguments[1]
        let inputFiles = CommandLine.arguments[2..<CommandLine.arguments.count]
        
//        guard let outFileUrl = URL(string: outPutFilePath) else {
//            throw DummyError(files: CommandLine.arguments.count - 1)
//        }
        let outFileUrl = URL(fileURLWithPath: outPutFilePath)
        let outFilePath: String
        if #available(iOS 16, macOS 13, *) {
            outFilePath = outFileUrl.path()
        } else {
            outFilePath = outFileUrl.path
        }
        
        if !FileManager.default.fileExists(atPath: outFileUrl.path) {
            FileManager.default.createFile(atPath: outFilePath, contents: nil)
        }
        
        let keyPaths = try await withThrowingTaskGroup(of: [String].self) { group in
            var result = [String]()
            
            for filePath in inputFiles {
                group.addTask {
                    let scanner = SourceFileScanner(filePath: filePath)
                    
                    return try await scanner.scan()
                }
            }
            
            for try await taskResult in group {
                result.append(contentsOf: taskResult)
            }
            
            return result
        }
        
        
        let fileContent = makeFileContent(with: keyPaths)
        
        
        try fileContent.write(to: outFileUrl, atomically: true, encoding: .utf8)
    }
    
    private static func makeFileContent(with keyPaths: [String]) -> String {
        let fileStartContent = """
        // THIS FILE IS GENERATED BY AutoRegisterPlugin, DO NOT EDIT IT!
        
        import Foundation
        import DependencyInjection
        
        extension DependencyInjectionContainer {
            static func registerAllDependencies(to container: DependencyInjectionContainer) {\n
        """
        
        let keyPathsUsageLines = keyPaths
            .map { "\t\tcontainer.register(keyPath: \($0))" }
            .joined(separator: "\n")
        
        let fileEndContent = """
            \n\t}
        }
        """
        
        return fileStartContent + keyPathsUsageLines + fileEndContent
    }
    
    struct DummyError: Error, CustomStringConvertible {
        let files: Int
        
        var description: String { "Amount of files: \(files)"}
    }
}
